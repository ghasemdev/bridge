import com.parsuomash.affogato.coroutines.core.DispatchersProvider
import javax.inject.Inject
import javax.inject.Singleton
import kotlin.coroutines.CoroutineContext
import kotlinx.coroutines.channels.BufferOverflow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.withContext

@Singleton
class SnackbarManager @Inject constructor(
  private val dispatcher: DispatchersProvider,
) {

  private val _snackbarData = MutableSharedFlow<SnackbarData?>(
    extraBufferCapacity = 2,
    onBufferOverflow = BufferOverflow.DROP_OLDEST
  )
  val snackbarData = _snackbarData.asSharedFlow()

  suspend fun sendMessage(
    data: SnackbarData,
    context: CoroutineContext = dispatcher.io
  ) = withContext(context) {
    _snackbarData.emit(data)
  }

  suspend fun cancelMessage(
    context: CoroutineContext = dispatcher.io
  ) = withContext(context) {
    _snackbarData.emit(null)
  }
}
